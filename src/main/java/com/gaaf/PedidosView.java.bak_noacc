package com.gaaf;
import javafx.geometry.*; import javafx.scene.control.*; import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.*; import javafx.scene.layout.*; import javafx.scene.control.TableView;
import java.math.BigDecimal; import java.time.LocalDate;
public class PedidosView {
    private final BorderPane root; private final TableView<PedidoRow> tabla = new TableView<>();
    private final Label pie = new Label("Listo."); private final PedidoDAO dao = new PedidoDAO();
    public PedidosView(App app){
        root = new BorderPane(); root.setPadding(new Insets(6));
        Button btnBack = new Button("\u2190 Regresar"); btnBack.setOnAction(e -> app.mostrarHome());
        ImageView logo = new ImageView(new Image(getClass().getResource("/img/logo.png").toExternalForm())); logo.setFitHeight(24); logo.setPreserveRatio(true);
        Label titulo = new Label("Pedidos"); titulo.getStyleClass().add("titulo");
        HBox header = new HBox(8, btnBack, logo, titulo); header.setAlignment(javafx.geometry.Pos.CENTER_LEFT); header.setPadding(new Insets(6));
        configurarTabla(); cargarDB();
        tabla.setPrefHeight(320);
BorderPane panelTabla = new BorderPane(tabla); panelTabla.setPadding(new Insets(8));
        panelTabla.setStyle("-fx-background-color:#ffffff; -fx-border-color:#d0d3d9; -fx-border-radius:10; -fx-background-radius:10;");
        VBox cuerpo = new VBox(6, header, panelTabla);
        root.setCenter(cuerpo); root.setBottom(pie); BorderPane.setMargin(pie, new Insets(6,10,10,10));
        root.getStylesheets().add(getClass().getResource("/styles.css").toExternalForm());
    }
    private void configurarTabla(){
        TableColumn<PedidoRow,Integer> cId = new TableColumn<>("ID_pedido"); cId.setCellValueFactory(new PropertyValueFactory<>("idPedido"));
        TableColumn<PedidoRow,Integer> cProv = new TableColumn<>("ID_proveedor"); cProv.setCellValueFactory(new PropertyValueFactory<>("idProveedor"));
        TableColumn<PedidoRow,LocalDate> cEnt = new TableColumn<>("Fecha entrega"); cEnt.setCellValueFactory(new PropertyValueFactory<>("fechaEntrega"));
        TableColumn<PedidoRow,Integer> cCant = new TableColumn<>("Cantidad total"); cCant.setCellValueFactory(new PropertyValueFactory<>("cantidadTotal"));
        TableColumn<PedidoRow,LocalDate> cCre = new TableColumn<>("Fecha creaciÃƒÂ³n"); cCre.setCellValueFactory(new PropertyValueFactory<>("fechaCreacion"));
        TableColumn<PedidoRow,BigDecimal> cPeso = new TableColumn<>("Peso total (KG)"); cPeso.setCellValueFactory(new PropertyValueFactory<>("pesoTotal"));
        TableColumn<PedidoRow,Integer> cRec = new TableColumn<>("Recibido"); cRec.setCellValueFactory(new PropertyValueFactory<>("recibido"));
        TableColumn<PedidoRow,String> cObs = new TableColumn<>("Observaciones"); cObs.setCellValueFactory(new PropertyValueFactory<>("observaciones"));
        tabla.getColumns().setAll(cId,cProv,cEnt,cCant,cCre,cPeso,cRec,cObs);
        tabla.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);
    }
    private void cargarDB(){
        try { tabla.getItems().setAll(dao.listar()); pie.setText("Pedidos cargados desde base de datos."); }
        catch(Exception ex){ new Alert(Alert.AlertType.ERROR,"Error cargando pedidos: "+ex.getMessage()).showAndWait(); pie.setText("Error al cargar pedidos."); }
    }
    public BorderPane getRoot(){ return root; }
}

